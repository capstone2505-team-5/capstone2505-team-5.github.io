---
// Carousel.astro - Image carousel with navigation and captions
export interface Props {
  images: {
    src: string;
    alt: string;
    caption: string;
  }[];
  title?: string;
}

const { images, title } = Astro.props;
---

<div class="carousel-container">
  {title && <h3 class="carousel-title">{title}</h3>}
  
  <div class="carousel-wrapper">
    <button class="carousel-arrow carousel-arrow-left" aria-label="Previous image">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
      </svg>
    </button>
    
    <div class="carousel-track">
      {images.map((image, index) => (
        <div class="carousel-slide" data-index={index}>
          <img src={image.src} alt={image.alt} class="carousel-image" />
          <div class="carousel-caption">
            <p>{image.caption}</p>
          </div>
        </div>
      ))}
    </div>
    
    <button class="carousel-arrow carousel-arrow-right" aria-label="Next image">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
      </svg>
    </button>
  </div>
  
  <div class="carousel-indicators">
    {images.map((_, index) => (
      <button class="carousel-indicator" data-index={index} aria-label={`Go to image ${index + 1}`}>
        <span class="indicator-dot"></span>
      </button>
    ))}
  </div>
</div>

<script>
  class Carousel {
    private container: HTMLElement;
    private track: HTMLElement;
    private slides: HTMLElement[];
    private indicators: HTMLElement[];
    private leftArrow: HTMLButtonElement | null;
    private rightArrow: HTMLButtonElement | null;
    private currentIndex: number;
    private totalSlides: number;

    constructor(container: HTMLElement) {
      this.container = container;
      this.track = container.querySelector('.carousel-track') as HTMLElement;
      this.slides = Array.from(container.querySelectorAll('.carousel-slide')) as HTMLElement[];
      this.indicators = Array.from(container.querySelectorAll('.carousel-indicator')) as HTMLElement[];
      this.leftArrow = container.querySelector('.carousel-arrow-left') as HTMLButtonElement;
      this.rightArrow = container.querySelector('.carousel-arrow-right') as HTMLButtonElement;
      
      this.currentIndex = 0;
      this.totalSlides = this.slides.length;
      
      this.init();
    }
    
    init() {
      this.updateSlides();
      this.updateIndicators();
      this.bindEvents();
    }
    
    bindEvents() {
      this.leftArrow?.addEventListener('click', () => this.previous());
      this.rightArrow?.addEventListener('click', () => this.next());
      
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => this.goTo(index));
      });
      
      // Keyboard navigation
      this.container.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.previous();
        } else if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.next();
        }
      });
      
      // Touch/swipe support
      let startX = 0;
      let endX = 0;
      
      this.container.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });
      
      this.container.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        this.handleSwipe(startX, endX);
      });
    }
    
    handleSwipe(startX: number, endX: number) {
      const threshold = 50;
      const diff = startX - endX;
      
      if (Math.abs(diff) > threshold) {
        if (diff > 0) {
          this.next();
        } else {
          this.previous();
        }
      }
    }
    
    previous() {
      this.currentIndex = this.currentIndex === 0 ? this.totalSlides - 1 : this.currentIndex - 1;
      this.updateSlides();
      this.updateIndicators();
    }
    
    next() {
      this.currentIndex = this.currentIndex === this.totalSlides - 1 ? 0 : this.currentIndex + 1;
      this.updateSlides();
      this.updateIndicators();
    }
    
    goTo(index: number) {
      this.currentIndex = index;
      this.updateSlides();
      this.updateIndicators();
    }
    
    updateSlides() {
      this.slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${(index - this.currentIndex) * 100}%)`;
        slide.setAttribute('aria-hidden', index !== this.currentIndex ? 'true' : 'false');
        
        // Update track height based on current slide
        if (index === this.currentIndex) {
          const slideHeight = slide.scrollHeight;
          this.track.style.height = `${slideHeight}px`;
        }
      });
    }
    
    updateIndicators() {
      this.indicators.forEach((indicator, index) => {
        if (index === this.currentIndex) {
          indicator.classList.add('active');
          indicator.setAttribute('aria-current', 'true');
        } else {
          indicator.classList.remove('active');
          indicator.removeAttribute('aria-current');
        }
      });
    }
  }
  
  // Initialize all carousels on the page
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel-container');
    carousels.forEach(carousel => new Carousel(carousel as HTMLElement));
  });
</script>

<style>
  .carousel-container {
    position: relative;
    max-width: 800px;
    margin: 2rem auto;
    background: var(--white);
    border-radius: 1rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  
  .carousel-title {
    text-align: center;
    margin: 0;
    padding: 1.5rem 1.5rem 1rem;
    color: var(--gray-800);
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .carousel-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .carousel-track {
    position: relative;
    width: 100%;
    min-height: 400px;
    overflow: hidden;
  }
  
  .carousel-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    transition: transform 0.3s ease-in-out;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
  }
  
  .carousel-image {
    width: 100%;
    max-height: 400px;
    object-fit: contain;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .carousel-caption {
    padding: 1rem 1.5rem;
    background: var(--gray-50);
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.5rem;
    min-height: 60px;
  }
  
  .carousel-caption p {
    margin: 0;
    color: var(--gray-700);
    font-size: 0.95rem;
    line-height: 1.5;
    text-align: center;
  }
  
  .carousel-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: var(--gray-600);
    transition: all 0.2s ease;
    z-index: 10;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .carousel-arrow:hover {
    background: var(--white);
    color: var(--primary-blue);
    transform: translateY(-50%) scale(1.1);
  }
  
  .carousel-arrow:focus {
    outline: 2px solid var(--primary-blue);
    outline-offset: 2px;
  }
  
  .carousel-arrow-left {
    left: 1rem;
  }
  
  .carousel-arrow-right {
    right: 1rem;
  }
  
  .carousel-indicators {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    padding: 1rem;
  }
  
  .carousel-indicator {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: all 0.2s ease;
  }
  
  .carousel-indicator:hover {
    background: var(--gray-100);
  }
  
  .indicator-dot {
    display: block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--gray-300);
    transition: all 0.2s ease;
  }
  
  .carousel-indicator.active .indicator-dot {
    background: var(--primary-blue);
    transform: scale(1.2);
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .carousel-container {
      margin: 1rem;
      border-radius: 0.5rem;
    }
    
    .carousel-track {
      height: 350px;
    }
    
    .carousel-image {
      max-height: 300px;
      margin: 0 0.5rem;
    }
    
    .carousel-arrow {
      width: 40px;
      height: 40px;
    }
    
    .carousel-arrow-left {
      left: 0.5rem;
    }
    
    .carousel-arrow-right {
      right: 0.5rem;
    }
    
    .carousel-caption {
      padding: 0.75rem 1rem;
    }
    
    .carousel-caption p {
      font-size: 0.9rem;
    }
  }
  
  @media (max-width: 480px) {
    .carousel-track {
      height: 300px;
    }
    
    .carousel-image {
      max-height: 250px;
    }
    
    .carousel-arrow {
      width: 36px;
      height: 36px;
    }
  }
</style>
