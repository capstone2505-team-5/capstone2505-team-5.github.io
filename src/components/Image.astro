---
// Image.astro - Reusable image/video component for diagrams and other media
export interface Props {
  src: string;
  alt: string;
  caption?: string;
  width?: string;
  height?: string;
  clickable?: boolean;
  centered?: boolean;
  bordered?: boolean;
  shadow?: boolean;
  rounded?: boolean;
  isVideo?: boolean;
  autoplay?: boolean;
  loop?: boolean;
  muted?: boolean;
  controls?: boolean;
  noShadow?: boolean;
}

const { 
  src, 
  alt, 
  caption, 
  width = "100%", 
  height = "auto", 
  clickable = false,
  centered = true,
  bordered = false,
  shadow = true,
  rounded = false,
  isVideo = false,
  autoplay = true,
  loop = true,
  muted = true,
  controls = false,
  noShadow = false
} = Astro.props;

// Determine if it's a video based on file extension or explicit prop
const isVideoFile = isVideo || src.toLowerCase().match(/\.(mp4|webm|ogg|mov|avi)$/);
---

<div class={`media-container ${centered ? 'centered' : ''}`}>
  {isVideoFile ? (
    <video 
      src={src}
      class={`media-component ${clickable ? 'clickable' : ''} ${bordered ? 'bordered' : ''} ${shadow && !noShadow ? 'shadow' : ''} ${rounded ? 'rounded' : ''}`}
      style={`width: ${width}; height: ${height};`}
      data-src={src}
      data-alt={alt}
      data-caption={caption}
      data-is-video="true"
      autoplay={autoplay}
      loop={loop}
      muted={muted}
      controls={controls}
      playsinline
    >
      <track kind="captions" />
      Your browser does not support the video tag.
    </video>
  ) : (
    <img 
      src={src} 
      alt={alt} 
      class={`media-component ${clickable ? 'clickable' : ''} ${bordered ? 'bordered' : ''} ${shadow && !noShadow ? 'shadow' : ''} ${rounded ? 'rounded' : ''}`}
      style={`width: ${width}; height: ${height};`}
      data-src={src}
      data-alt={alt}
      data-caption={caption}
      data-is-video="false"
    />
  )}
  {caption && (
    <div class="media-caption">
      <p>{caption}</p>
    </div>
  )}
</div>

<script>
  // Global modal functionality - will be handled by separate modal component
  document.addEventListener('DOMContentLoaded', () => {
    // Attach click handlers to all clickable media
    const mediaElements = document.querySelectorAll('.media-component.clickable');
    mediaElements.forEach(media => {
      media.addEventListener('click', () => {
        const src = media.getAttribute('data-src');
        const alt = media.getAttribute('data-alt');
        const caption = media.getAttribute('data-caption');
        const isVideo = media.getAttribute('data-is-video') === 'true';
        
        if (src) {
          // Dispatch custom event for global modal
          const event = new CustomEvent('openMediaModal', {
            detail: { src, alt: alt || '', caption: caption || '', isVideo }
          });
          document.dispatchEvent(event);
        }
      });
    });
  });
</script>

<style>
  .media-container {
    margin: 2rem 0;
  }

  .media-container.centered {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .media-component {
    max-width: 100%;
    object-fit: contain;
    transition: all 0.2s ease;
  }

  .media-component.shadow {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .media-component.bordered {
    border: 1px solid var(--gray-200);
  }

  .media-component.rounded {
    border-radius: 0.5rem;
  }

  .media-component.clickable {
    cursor: pointer;
  }

  .media-component.clickable:hover {
    transform: scale(1.02);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  .media-caption {
    margin-top: 0.75rem;
    text-align: center;
    max-width: 100%;
  }

  .media-caption p {
    margin: 0;
    color: var(--gray-600);
    font-size: 0.9rem;
    line-height: 1.4;
    font-style: italic;
  }
</style>
