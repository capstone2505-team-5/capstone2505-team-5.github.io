---
import BaseLayout from '../layouts/BaseLayout.astro';
import NavBar from '../components/NavBar.astro';
import Background from '../components/case-study/Background.astro';
import Architecture from '../components/case-study/Architecture.astro';
import OurSolution from '../components/case-study/OurSolution.astro';
import Introduction from '../components/case-study/Introduction.astro';
import EngineeringChallenges from '../components/case-study/EngineeringChallenges.astro';
import FutureWork from '../components/case-study/FutureWork.astro';
import ExistingSolutions from '../components/case-study/ExistingSolutions.astro';

const sections = [
	{
		title: "Introduction",
		id: "introduction",
		children: [
			{
				title: "What is LLMonade?",
				id: "what-is-llmonade"
			}
		]
	},
	{
		title: "Background",
		id: "background",
		children: [
			{
				title: "Deterministic Applications",
				id: "deterministic-applications"
			},
			{
				title: "Artificial Intelligence and Large Language Models",
				id: "artificial-intelligence-and-large-language-models"
			},
			{
				title: "Observability in LLM-Powered Software",
				id: "observability-in-llm-powered-software"
			},
			{
				title: "Evaluating LLM-based Applications",
				id: "evaluating-llm-based-applications"
			},
			{
				title: "Emerging Best Practices",
				id: "emerging-best-practices"
			},
			{
				title: "Effective Human Review Interface",
				id: "effective-human-review-interface"
			}
		]
	},
	{
		title: "Existing Solutions",
		id: "existing-solutions",
		children: [
			{
				title: "AI Evaluation Software",
				id: "ai-evaluation-software"
			},
			{
				title: "Data Labeling Software",
				id: "data-labeling-software"
			},
			{
				title: "Gap in Service",
				id: "gap-in-service"
			},
		]
	},
	{
		title: "Our Solution",
		id: "our-solution",
		children: [
			{
				title: "Introducing LLMonade",
				id: "introducing-llmonade"
			},
			{
				title: "Fullstack Error Analysis Web Application",
				id: "fullstack-error-analysis-web-application"
			}
		]
	},
	{
		title: "Architecture",
		id: "architecture",
		children: [
			{
				title: "Trace Generation",
				id: "trace-generation"
			},
			{
				title: "Root Spans ETL Pipeline",
				id: "root-spans-etl-pipeline"
			},
			{
				title: "Evaluation Data Persistence",
				id: "evaluation-data-persistence"
			},
			{
				title: "Error Analysis Fullstack Application",
				id: "error-analysis-fullstack-application"
			},
		]
	},
	{
		title: "Engineering Challenges",
		id: "engineering-challenges",
		children: [
			{
				title: "Collecting Root Spans",
				id: "collecting-root-spans"
			},
			{
				title: "Data Ingestion",
				id: "data-ingestion"
			},
			{
				title: "Standardizing our Platform",
				id: "standardizing-our-platform"
			},
			{
				title: "Serverless Architecture",
				id: "serverless-architecture"
			}
		]
	},
	{
		title: "Future Work",
		id: "future-work",
		children: [
			{
				title: "Integrate with More AI Observability Platforms",
				id: "integrate-with-more-ai-observability-platforms"
			},
			{
				title: "Expand Deployment Options",
				id: "expand-deployment-options"
			},
			{
				title: "Provide More App Functionality",
				id: "provide-more-app-functionality"
			}
		]
	},
];

---

<BaseLayout>
	<NavBar currentPage="case-study" />

	<div class="case-study-layout">
		<aside class="sidebar">
			<nav class="sidebar-nav">
				<ul class="sidebar-nav-list">
					{sections.map((section) => (
						<li>
							<a href={`#${section.id}`} class="sidebar-nav-item" data-section={section.id}>{section.title}</a>
							<ul class="sidebar-nav-sub-list">
								{section.children.map((child) => (
									<li><a href={`#${child.id}`} class="sidebar-nav-sub-item" data-section={child.id}>{child.title}</a></li>
								))}
							</ul>
						</li>
					))}
				</ul>
			</nav>
		</aside>

		<main class="main-content">
			{sections.map((section) => (
				<section id={section.id} class="content-section">
					<h2>{section.title}</h2>
					{section.id === 'introduction' && <Introduction />}
					{section.id === 'background' && <Background />}
					{section.id === 'existing-solutions' && <ExistingSolutions />}
					{section.id === 'our-solution' && <OurSolution />}
					{section.id === 'architecture' && <Architecture />}
					{section.id === 'engineering-challenges' && <EngineeringChallenges />}
					{section.id === 'future-work' && <FutureWork />}
				</section>
			))}
		</main>
	</div>
</BaseLayout>

<script>
	// Intersection Observer for highlighting active navigation items
	const observerOptions = {
		rootMargin: '-20% 0px -60% 0px',
		threshold: [0, 0.1, 0.5, 1]
	};

	let lastScrollY = window.scrollY;
	let scrollDirection = 'down';
	
	// Track scroll direction
	window.addEventListener('scroll', () => {
		const currentScrollY = window.scrollY;
		scrollDirection = currentScrollY > lastScrollY ? 'down' : 'up';
		lastScrollY = currentScrollY;
	});

	const observer = new IntersectionObserver((entries) => {
		entries.forEach(entry => {
			const id = entry.target.getAttribute('id');
			const navItem = document.querySelector(`[data-section="${id}"]`);
			const subNavItem = document.querySelector(`[data-section="${id}"]`);
			
			if (entry.isIntersecting) {
				// Remove active class from all nav items and sub-items
				document.querySelectorAll('.sidebar-nav-item, .sidebar-nav-sub-item').forEach(item => {
					item.classList.remove('active');
				});
				
				// Check if this is a subsection (h3 element)
				if (entry.target.tagName === 'H3') {
					// Find the parent section of this subsection
					const parentSection = entry.target.closest('.content-section');
					if (parentSection) {
						const parentSectionId = parentSection.getAttribute('id');
						const parentNavItem = document.querySelector(`[data-section="${parentSectionId}"]`);
						if (parentNavItem) {
							parentNavItem.classList.add('active');
						}
					}
					
					// Add active class to the subsection nav item
					if (subNavItem) {
						subNavItem.classList.add('active');
					}
				} else {
					// This is a main section, highlight the main nav item and the closest sub-item
					if (navItem) {
						navItem.classList.add('active');
						
						// Find the closest subsection to current scroll position
						const subList = navItem.nextElementSibling;
						if (subList && subList.classList.contains('sidebar-nav-sub-list')) {
							const subItems = subList.querySelectorAll('.sidebar-nav-sub-item');
							let closestSubItem = null;
							let closestDistance = Infinity;
							
							subItems.forEach(subItem => {
								const targetId = subItem.getAttribute('href')?.substring(1);
								const targetElement = document.getElementById(targetId || '');
								if (targetElement) {
									const distance = Math.abs(targetElement.offsetTop - window.scrollY);
									if (distance < closestDistance) {
										closestDistance = distance;
										closestSubItem = subItem;
									}
								}
							});
							
							if (closestSubItem) {
								(closestSubItem as HTMLElement).classList.add('active');
							}
						}
					}
				}
			}
		});
	}, observerOptions);

	// Function to update sidebar expansion based on current scroll position
	function updateSidebarExpansion() {
		const sections = document.querySelectorAll('.content-section');
		const sectionIds = Array.from(sections).map(section => section.getAttribute('id'));
		
		// Find which section is currently most visible
		let currentSectionIndex = -1;
		const scrollPosition = window.scrollY + 200; // Offset for better detection
		
		sections.forEach((section, index) => {
			const rect = section.getBoundingClientRect();
			const sectionTop = rect.top + window.scrollY;
			const sectionBottom = sectionTop + rect.height;
			
			if (scrollPosition >= sectionTop && scrollPosition <= sectionBottom) {
				currentSectionIndex = index;
			}
		});
		
		// Update sidebar expansion
		sectionIds.forEach((sectionId, index) => {
			const navItem = document.querySelector(`[data-section="${sectionId}"]`);
			const subList = navItem?.nextElementSibling;
			
			if (navItem && subList && subList.classList.contains('sidebar-nav-sub-list')) {
				// Only expand the current section, collapse all others
				const shouldExpand = index === currentSectionIndex;
				
				if (shouldExpand) {
					(subList as HTMLElement).style.display = 'block';
					navItem.classList.add('expanded');
				} else {
					(subList as HTMLElement).style.display = 'none';
					navItem.classList.remove('expanded');
				}
			}
		});
	}

	// Observe all sections and subsections
	document.addEventListener('DOMContentLoaded', () => {
		const sections = document.querySelectorAll('.content-section');
		const subsections = document.querySelectorAll('h3[id]'); // All h3 elements with IDs
		
		sections.forEach(section => {
			observer.observe(section);
		});
		
		subsections.forEach(subsection => {
			observer.observe(subsection);
		});

		// Initialize sidebar expansion state
		updateSidebarExpansion();
		
		// Add scroll listener for dynamic sidebar expansion with debouncing
		let scrollTimeout: ReturnType<typeof setTimeout>;
		window.addEventListener('scroll', () => {
			clearTimeout(scrollTimeout);
			scrollTimeout = setTimeout(() => {
				updateSidebarExpansion();
			}, 50);
		});
	});

		// Smooth scrolling for main navigation links
		const navLinks = document.querySelectorAll('.sidebar-nav-item');
		navLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const targetId = link.getAttribute('href')?.substring(1);
				const targetSection = document.getElementById(targetId || '');
				if (targetSection) {
					const headerHeight = 80; // Height of the fixed header
					const targetPosition = targetSection.offsetTop - headerHeight;
					window.scrollTo({
						top: targetPosition,
						behavior: 'smooth'
					});
				}
			});
		});

		// Smooth scrolling for sub-navigation links
		const subNavLinks = document.querySelectorAll('.sidebar-nav-sub-item');
		subNavLinks.forEach(link => {
			link.addEventListener('click', (e) => {
				e.preventDefault();
				const targetId = link.getAttribute('href')?.substring(1);
				const targetSubsection = document.getElementById(targetId || '');
				if (targetSubsection) {
					const headerHeight = 80; // Height of the fixed header
					const targetPosition = targetSubsection.offsetTop - headerHeight;
					
					// Temporarily disable observer to prevent interference
					observer.disconnect();
					
					window.scrollTo({
						top: targetPosition,
						behavior: 'smooth'
					});
					
					// Re-enable observer after scroll completes
					setTimeout(() => {
						// Re-observe all elements
						const sections = document.querySelectorAll('.content-section');
						const subsections = document.querySelectorAll('h3[id]');
						
						sections.forEach(section => {
							observer.observe(section);
						});
						
						subsections.forEach(subsection => {
							observer.observe(subsection);
						});
						
						// Force update the active state
						updateSidebarExpansion();
					}, 500);
				}
			});
		});

</script>

<style>
	/* Case Study specific styles */
	.case-study-layout {
		display: flex;
		margin-top: 80px;
		min-height: calc(100vh - 80px);
	}

	.sidebar {
		position: fixed;
		left: 0;
		top: 80px;
		width: 300px;
		height: calc(100vh - 80px);
		background: var(--gray-50);
		border-right: 1px solid var(--gray-200);
		overflow-y: auto;
		z-index: 50;
	}

	.sidebar-nav {
		padding: 2rem 1.5rem;
	}

	.sidebar-nav h3 {
		margin: 0 0 1.5rem 0;
		font-size: 1.1rem;
		font-weight: 600;
		color: var(--gray-700);
	}

	.sidebar-nav-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.sidebar-nav-item {
		display: block;
		padding: 0.75rem 1rem;
		margin-bottom: 0.5rem;
		color: var(--gray-600);
		text-decoration: none;
		border-radius: 0.5rem;
		transition: all 0.2s ease;
		font-size: 1.1rem;
		font-weight: 600;
	}

	.sidebar-nav-item:hover {
		background: var(--gray-200);
		color: var(--gray-800);
	}

	.sidebar-nav-item.active {
		background: var(--primary-blue);
		color: white;
		font-weight: 600;
	}

	.sidebar-nav-sub-list {
		list-style: none;
		margin: 0;
		padding: 0;
		margin-left: 1rem;
		margin-top: 0.25rem;
	}

	.sidebar-nav-sub-item {
		display: block;
		padding: 0.5rem 0.75rem;
		color: var(--gray-600);
		text-decoration: none;
		font-weight: 500;
		font-size: 0.875rem;
		border-radius: 0.375rem;
		transition: all 0.2s ease;
		margin-bottom: 0.25rem;
	}

	.sidebar-nav-sub-item:hover {
		background: var(--gray-200);
		color: var(--gray-800);
	}

	.sidebar-nav-sub-item.active {
		background: var(--gray-200);
		color: var(--gray-800);
	}



	.main-content {
		flex: 1;
		margin-left: 320px;
		padding: 2rem 3rem;
		max-width: calc(100vw - 320px);
	}

	.content-section {
		margin-bottom: 4rem;
		scroll-margin-top: 100px;
	}

	.content-section h2 {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--gray-900);
		margin-bottom: 1.5rem;
		border-bottom: 3px solid var(--primary-blue);
		padding-bottom: 0.5rem;
	}

	.content-section h3 {
		font-size: 1.5rem;
		font-weight: 600;
		color: var(--gray-800);
		margin: 2rem 0 1rem 0;
	}

	.content-section h4 {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--gray-700);
		margin: 1.5rem 0 0.75rem 0;
	}

	.content-section p {
		font-size: 1.1rem;
		line-height: 1.7;
		color: var(--gray-600);
		margin-bottom: 1rem;
	}

	.content-section ul {
		margin: 1rem 0;
		padding-left: 1.5rem;
	}

	.content-section li {
		margin-bottom: 0.5rem;
		line-height: 1.6;
		color: var(--gray-600);
	}

	.highlight-box {
		background: linear-gradient(135deg, var(--primary-blue), var(--primary-green));
		color: white;
		padding: 2rem;
		border-radius: 1rem;
		margin: 2rem 0;
	}

	.highlight-box h4 {
		color: white;
		margin-top: 0;
	}

	.highlight-box ul {
		margin: 1rem 0 0 0;
		padding-left: 1.5rem;
	}

	.highlight-box li {
		color: rgba(255, 255, 255, 0.9);
	}

	.research-grid,
	.solution-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
		gap: 1.5rem;
		margin: 2rem 0;
	}

	.research-card,
	.solution-card {
		background: white;
		padding: 1.5rem;
		border-radius: 0.75rem;
		border: 1px solid var(--gray-200);
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
		transition: transform 0.2s ease;
	}

	.research-card:hover,
	.solution-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}

	.research-card h4,
	.solution-card h4 {
		color: var(--primary-blue);
		margin-top: 0;
	}

	.timeline {
		margin: 2rem 0;
	}

	.timeline-item {
		display: flex;
		align-items: flex-start;
		margin-bottom: 2rem;
	}

	.timeline-marker {
		background: var(--primary-blue);
		color: white;
		width: 2rem;
		height: 2rem;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: 600;
		font-size: 0.9rem;
		margin-right: 1rem;
		flex-shrink: 0;
	}

	.timeline-content h4 {
		margin-top: 0;
		color: var(--gray-800);
	}

	.tech-stack {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 2rem;
		margin: 2rem 0;
	}

	.tech-category {
		background: var(--gray-50);
		padding: 1.5rem;
		border-radius: 0.75rem;
		border: 1px solid var(--gray-200);
	}

	.tech-category h4 {
		color: var(--primary-blue);
		margin-top: 0;
	}

	.tech-category ul {
		margin: 1rem 0 0 0;
		padding-left: 1.5rem;
	}

	.results-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1.5rem;
		margin: 2rem 0;
	}

	.metric-card {
		background: white;
		padding: 2rem;
		border-radius: 1rem;
		text-align: center;
		border: 1px solid var(--gray-200);
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
		transition: transform 0.2s ease;
	}

	.metric-card:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
	}

	.metric-value {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--primary-blue);
		margin-bottom: 0.5rem;
	}

	.metric-label {
		color: var(--gray-500);
		font-size: 0.9rem;
		font-weight: 500;
	}

	.cta-box {
		background: var(--gray-50);
		padding: 2rem;
		border-radius: 1rem;
		text-align: center;
		margin: 2rem 0;
		border: 1px solid var(--gray-200);
	}

	.cta-box h4 {
		color: var(--gray-800);
		margin-top: 0;
	}

	@media (max-width: 1024px) {
		.sidebar {
			width: 240px;
		}

		.main-content {
			margin-left: 240px;
			max-width: calc(100vw - 240px);
			padding: 2rem;
		}
	}

	@media (max-width: 768px) {
		.case-study-layout {
			flex-direction: column;
		}

		.sidebar {
			position: static;
			width: 100%;
			height: auto;
			border-right: none;
			border-bottom: 1px solid var(--gray-200);
		}

		.main-content {
			margin-left: 0;
			max-width: 100%;
			padding: 1.5rem;
		}

		.content-section h2 {
			font-size: 2rem;
		}

		.research-grid,
		.solution-grid,
		.tech-stack,
		.results-grid {
			grid-template-columns: 1fr;
		}
	}
</style>
